---
c_CANifier_Create1:
  internal: true
  code: |
    assert deviceNumber not in hal_data['CAN']
    self.hal_data = NotifyDict({
        'type': 'canifier',
        
        'bus_voltage': 12.0,
        
        'general_pin_outputs': 0x00,
        'general_pin_inputs': 0x00,
        'general_pin_is_output': 0x00,
        
        'led_a': 0.0,
        'led_b': 0.0,
        'led_c': 0.0,
        
        'last_error': ErrorCode.OK,
        
        'quad_position': 0,
        'quad_velocity': 0,
        
        'reset_occurred': False,
    })
    
    for i in range(4):
      self.hal_data.update({
        'pwm_%d' % i: 0.0042,
        'pwm_%d_en' % i: False,
        'pwm_%d_period' % i: 0.0042, # What's the default?
      })
    
    self._ledmap = {
      self.LEDChannel.A: 'led_a',
      self.LEDChannel.B: 'led_b',
      self.LEDChannel.C: 'led_c'
    }
    
    self._statusMap = {
      self.StatusFrame.Status_1_General: 'status_1_period',
      self.StatusFrame.Status_2_General: 'status_2_period',
      self.StatusFrame.Status_3_PwmInputs0: 'status_3_period',
      self.StatusFrame.Status_4_PwmInputs1: 'status_4_period',
      self.StatusFrame.Status_5_PwmInputs2: 'status_5_period',
      self.StatusFrame.Status_6_PwmInputs3: 'status_6_period',
      self.StatusFrame.Status_8_Misc: 'status_8_period',
    }
    
    for v in self._statusMap.values():
      self.hal_data[v] = 0.001 # What's the default?
    
    self._controlMap = {
      self.ControlFrame.CANifier_Control_1_General: 'control_1',
      self.ControlFrame.CANifier_Control_2_PwmOutput: 'control_2',
    }
      
    for v in self._controlMap.values():
      self.hal_data[v] = 0.001 # What's the default?
    
    hal_data['CAN'][deviceNumber] = self.hal_data
    
c_CANifier_GetDescription:
  ignore: true # TODO
  get: description
c_CANifier_SetLEDOutput:
  internal: true
  code: |
    self.hal_data[self._ledmap[ledChannel]] = dutyCycle / 1023
  doc: |
    Sets the LED Output
    
    :param percentOutput: Output duty cycle expressed as percentage.
    :param ledChannel: Channel to set the output of.
c_CANifier_SetGeneralOutputs:
  code: |
    self.hal_data['general_pin_outputs'] = outputsBits
    self.hal_data['general_pin_is_output'] = isOutputBits
  doc: |
    Sets the output of all General Pins

    :param outputBits: A bit mask of all the output states.  LSB->MSB is in the order of the #GeneralPin enum.
    :param isOutputBits: A boolean bit mask that sets the pins to be outputs or inputs.  A bit of 1 enables output.
c_CANifier_SetGeneralOutput:
  code: |
    go = self.hal_data['general_pin_outputs']
    goe = self.hal_data['general_pin_is_output']
    pin = (1 if outputValue else 0) << outputPin
    en = (1 if outputEnable else 0) << outputPin
    self.hal_data['general_pin_outputs'] = (go & ~(1 << outputPin)) | pin
    self.hal_data['general_pin_is_output'] = (goe & ~(1 << outputPin)) | en
  doc: |
    Sets the output of a General Pin

    :param outputPin: The pin to use as output.
    :param outputValue: The desired output state.
    :param outputEnable: Whether this pin is an output. "True" enables output.
c_CANifier_SetPWMOutput:
  internal: true
  code: |
    self.hal_data['pwm_%d' % pwmChannel] = dutyCycle / 1023.0
  doc: |
    Sets the PWM Output
    Currently supports PWM 0, PWM 1, and PWM 2
    
    :param pwmChannel: Index of the PWM channel to output.
    :param dutyCycle: Duty Cycle (0 to 1) to output.  Default period of the signal is 4.2 ms.
c_CANifier_EnablePWMOutput:
  internal: true
  code: |
    self.hal_data['pwm_%d_en' % pwmChannel] = bEnable
  doc: |
    Enables PWM Outputs
    Currently supports PWM 0, PWM 1, and PWM 2
    
    :param pwmChannel: Index of the PWM channel to enable.
    :param bEnable: enables output on the pwm channel.
c_CANifier_GetGeneralInputs:
  internal: true
  ignore: true # TODO
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
c_CANifier_GetGeneralInput:
  code: |
    retval = bool(self.hal_data['general_pin_inputs'] & (1 << inputPin))
  doc: |
    Gets the state of the specified pin

    :param inputPin: The index of the pin.
    :returns: The state of the pin.
c_CANifier_GetPWMInput:
  code: |
    retval = (self.hal_data['pwm_%d' % pwmChannel],
              self.hal_data['pwm_%d_period' % pwmChannel])
  doc: |
    Gets the PWM Input

    :param pwmChannel: PWM channel to get.
    :param dutyCycleAndPeriod: Double array to hold Duty Cycle [0] and Period [1].
c_CANifier_GetLastError:
  get: last_error
  doc: |
    Call GetLastError() generated by this object.
    Not all functions return an error code but can
    potentially report errors.

    This function can be used to retrieve those error codes.

    :returns: The last ErrorCode generated.
c_CANifier_GetBusVoltage:
  get: bus_voltage
  doc: |
    Gets the bus voltage seen by the device.
    
    :returns: The bus voltage value (in volts).
c_CANifier_GetQuadraturePosition:
  get: quad_position
  doc: |
    Gets the quadrature encoder's position
    
    :returns: Position of encoder
c_CANifier_SetQuadraturePosition:
  set: quad_position
  doc: |
    Sets the quadrature encoder's position
    
    :param newPosition: Position to set
    
    :param timeoutMs:   Timeout value in ms. If nonzero, function will wait for
                        config success and report an error if it times out.
                        If zero, no blocking or checking is performed.
    
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_GetQuadratureVelocity:
  get: quad_velocity
  doc: |
    Gets the quadrature encoder's velocity
    
    :returns: Velocity of encoder
c_CANifier_GetQuadratureSensor:
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
c_CANifier_ConfigVelocityMeasurementPeriod:
  code: pass
  doc: |
    Configures the period of each velocity sample.
    Every 1ms a position value is sampled, and the delta between that sample
    and the position sampled kPeriod ms ago is inserted into a filter.
    kPeriod is configured with this function.
    
    :param period:    Desired period for the velocity measurement. @see
                      #VelocityMeasPeriod
    
    :param timeoutMs: Timeout value in ms. If nonzero, function will wait for
                      config success and report an error if it times out.
                      If zero, no blocking or checking is performed.
    
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_ConfigVelocityMeasurementWindow:
  code: pass
  doc: |
    Sets the number of velocity samples used in the rolling average velocity
    measurement.
    
    :param windowSize: Number of samples in the rolling average of velocity
                       measurement. Valid values are 1,2,4,8,16,32. If another
                       value is specified, it will truncate to nearest support value.
    
    :param timeoutMs:  Timeout value in ms. If nonzero, function will wait for
                       config success and report an error if it times out.
                       If zero, no blockinxxg xxor checking is performed.
    
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_SetLastError:
  code: |
    self.hal_data['last_error'] = ErrorCode(error)
c_CANifier_ConfigSetParameter:
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
  doc: |
    Sets a parameter. Generally this is not used.

    This can be utilized in

    - Using new features without updating API installation.
    - Errata workarounds to circumvent API implementation.
    - Allows for rapid testing / unit testing of firmware.
    
    :param param:
        Parameter enumeration.
    :param value:
        Value of parameter.
    :param subValue:
        Subvalue for parameter. Maximum value of 255.
    :param ordinal:
        Ordinal of parameter.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_ConfigGetParameter:
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
  doc: |
    Gets a parameter. Generally this is not used.

    This can be utilized in

    - Using new features without updating API installation.
    - Errata workarounds to circumvent API implementation.
    - Allows for rapid testing / unit testing of firmware.

    :param param:
        Parameter enumeration.
    :param ordinal:
        Ordinal of parameter.
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Value of parameter.
c_CANifier_ConfigSetCustomParam:
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
  doc: |
    Sets the value of a custom parameter. This is for arbitrary use.

    Sometimes it is necessary to save calibration/duty cycle/output
    information in the device. Particularly if the
    device is part of a subsystem that can be replaced.
    
    :param newValue:
        Value for custom parameter.
    :param paramIndex:
        Index of custom parameter [0-1].
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_ConfigGetCustomParam:
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
  doc: |
    Gets the value of a custom parameter. This is for arbitrary use.

    Sometimes it is necessary to save calibration/duty cycle/output
    information in the device. Particularly if the
    device is part of a subsystem that can be replaced.

    :param paramIndex:
        Index of custom parameter [0-1].
    :param timeoutMs:
        Timeout value in ms. If nonzero, function will wait for config
        success and report an error if it times out. If zero, no
        blocking or checking is performed.
    :returns: Value of the custom param.
c_CANifier_GetFaults:
  internal: true
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
c_CANifier_GetStickyFaults:
  internal: true
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
c_CANifier_ClearStickyFaults:
  code: |
    raise NotImplementedError("Not implemented in simulation (file a bug on github if you need it")
  doc: |
    Clears the Sticky Faults
    
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_GetFirmwareVersion:
  code: |
    retval = 0
  doc: |
    Gets the firmware version of the device.

    :returns: Firmware version of device.
c_CANifier_HasResetOccurred:
  code: |
    retval = self.hal_data['reset_occurred']
    self.hal_data['reset_occurred'] = False
  doc: |
    Returns true if the device has reset since last call.

    :returns: Has a Device Reset Occurred?
c_CANifier_SetStatusFramePeriod:
  code: |
    self.hal_data[self._statusMap[frame]] = periodMs
  doc: |
    Sets the period of the given status frame.
    
    :param frame: Frame whose period is to be changed.
    :param periodMs: Period in ms for the given frame.
    :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                      success and report an error if it times out. If zero, no
                      blocking or checking is performed.
    :returns: Error Code generated by function. 0 indicates no error.
c_CANifier_GetStatusFramePeriod:
  code: |
    retval = self.hal_data[self._statusMap[frame]]
  doc: |
    Gets the period of the given status frame.
    
    :param frame: Frame to get the period of.
    :param timeoutMs: Timeout value in ms. If nonzero, function will wait for config
                      success and report an error if it times out. If zero, no
                      blocking or checking is performed.
    :returns: Period of the given status frame.
c_CANifier_SetControlFramePeriod:
  code: |
    self.hal_data[self._controlMap[frame]] = periodMs
  doc: |
    Sets the period of the given control frame.

    :param frame:
        Frame whose period is to be changed.
    :param periodMs:
        Period in ms for the given frame.
    :returns: Error Code generated by function. 0 indicates no error.
